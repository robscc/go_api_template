// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-01-27 17:28:21.526167 +0800 CST m=+2.781828896

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Chenchuan.Song",
            "email": "robscc269@gmail.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ping": {
            "get": {
                "description": "Ping server",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ping"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sample/delete_handler": {
            "delete": {
                "description": "method sample delete",
                "tags": [
                    "Method"
                ],
                "summary": "DeleteHandler",
                "responses": {
                    "204": {}
                }
            }
        },
        "/sample/get_handler": {
            "get": {
                "description": "method sample get",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Method"
                ],
                "summary": "GetHandler",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sample/post_file_handler": {
            "post": {
                "description": "method sample post file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Method"
                ],
                "summary": "PostFileHandler",
                "parameters": [
                    {
                        "type": "file",
                        "description": "the file to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sample/post_handler": {
            "post": {
                "description": "method sample post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Method"
                ],
                "summary": "PostHandler",
                "parameters": [
                    {
                        "description": "PostSampleParams the sample_key is required",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/controller.PostSampleParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sample/put_handle": {
            "put": {
                "description": "method sample put",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Method"
                ],
                "summary": "PutHandler",
                "parameters": [
                    {
                        "description": "PutSampleParams the sample_key is required",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/controller.PutSampleParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/test_auth": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "TestAuth server",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ping"
                ],
                "summary": "TestAuth",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.PostSampleParams": {
            "type": "object",
            "required": [
                "sample_Key"
            ],
            "properties": {
                "sample_Key": {
                    "description": "sample key is sample and must be valued when post to server",
                    "type": "string"
                }
            }
        },
        "controller.PutSampleParams": {
            "type": "object",
            "required": [
                "sample_Key"
            ],
            "properties": {
                "sample_Key": {
                    "description": "sample key is sample and must be valued when post to server",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-KEY",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Go API Template",
	Description: "Go API Template",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
